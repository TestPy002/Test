/*css base code*/

*{ /** selects whole document*/
    margin:0;
    padding:0;
    box-sizing: border-box;
}
html,body {
    width: 100%;
    height: 100%;
    background-color: yellow;
}
/*direct tag name to add style to all tags having that name*/
/* .class name to add style to that tag*/
/* #id name to add style to that tag*/
p {
    color: #333;
    font-size: 28px;
    font-family: Arial, sans-serif;
    text-align: center;
    margin-top: 20px; /*margin is distance away from screen edges*/
    padding: 10px;  /*padding is distance between border and element inside border*/
    background-color: black;
    border: 1px solid #ccc;
    
}
/*display- block- makes element takes space as width/height; inline- makes element take shape as it wants-good for dynamic; inline-block - provides mixed*/
/*position- fixed-stays on screen, absolute-can be moved anywhere in document, relative- used with absolute; sticky- like relative but becomes fixed at one*/
#fish{
    position: absolute;
    font-size: 28px;
    font-family: Arial, sans-serif;
    background: transparent;
    right: 50%;
    bottom: 50%;
    border: 1px solid black;
    position: fixed; /*fixed on screen, doesnt move with scrolling even*/
}
.pic {
    position: relative;
    width: 300px;
    height: 200px;
}
.fire {
    color: yellow;
    font-size: 15px;
    background: #3e8e41;
    position: absolute;
    top: 50%;
    left: 70%;
}
.gif {
    width: 100%;
    height: 700px; /* Adjust height as needed */
    background-image: url('https://i.pinimg.com/originals/ef/5e/4b/ef5e4b4d024c66b42311e337ae8ab4cc.gif');
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center; /*for big images, its used to focus on one part like left,top,bottom or units*/
    animation: play 1s steps(1) infinite; /* Adjust timing as needed */
}
a {
    position: absolute;
    top: 100%;
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 20px 50px 200px; /*top right bottom left*/
    cursor:crosshair;
    border-radius: 8px;
}

a:hover {
    background-color: #45a049; /* Darker Green */
}

a:active {
    background-color: #3e8e41; /* Even Darker Green */
}
@keyframes play {
    0% {
        background-position: 0 0;
    }
    100% {
        background-position: 100% 0;
    }
}
/*flexbox/flex/inline-flex creates flex used for dynamic layout and responsive design*/
/*flex property has 3 features flex-grow, flex-shrink, flex-basis*/
/*flex-grow is how much relative to other flex items, this item can increase its size if there free space*/
/*flex-shrink is how much the item can decrease its size if there's not enough space*/
/*flex-basis is set to auto or given value, it basically tells initial size of flex before grow/shrink*/
/*note-flex-grow/shrink are like assigning priority which element will grow/shrink more than others*/
/*order- can give order in which they are placed, lower value comes in beginning, higher value is last*/
/*flex-wrap-used if there not enough space in one line, makes the elements go to next line*/
.box
{
    display: flex;
    flex-direction: row;/*tells main axis is row, that elements are kept in row/horizantly*/
    position: relative;
    justify-content: space-around; /*tells the way elements kept along main axis. here row/x-axis*/
    align-items: baseline; /*tells how elements kept along cross axis, here column/y-axis*/
}
.red
{
    background-color: red;
    width: 100px; height: 100px;
    flex: 0 1 auto;/*flex is property of flex-items inside flex-container*/
    /*0 in grow means wont grow*/
}
.green
{
    position: absolute;
    background-color: green;
    width: 40px; height: 40px;
    bottom: 10%;
    left: 5%;
}
.white
{
    align-self:flex-start; /*align-self is just flex-item property like individual property*/
    background-color: white;
    width: 30px; height: 30px;
}
/*media query is used to apply styles based on device type or screen orientation, below its syntax*/
/*@media media_type and (media_feature) {
    CSS rules to apply when the media feature matches }*/
/*media-type is device/screen type, media feature is condtion like max/min size,aspect ratio,oreintation*/
/*if media-feature matches  then css rule inside @media will be applied*/
/*now grid is another layout like flex, as it sounds, its basically rows-columns with cells like in excel*/
.grid-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3 equal-width columns of 1fr size, fr is size unit like pixel */
    grid-template-rows: auto; /* Auto-sized rows */
    gap: 20px; /* Gap between grid tracks */
    padding: 20px; /* Padding around the grid */
    }
    .grid-item {
    background-color: #f0f0f0;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
    }
    .grid-item:nth-child(odd) {
    background-color:aqua;
    }
    /* Line-based placement */
    .grid-item:nth-child(3) {
    grid-column: span 2; /* takes size of 2 columns */
    grid-row: span 2; /* takes size of 2 rows */
    }
    /* Responsive layout */
    @media (max-width: 768px) {
    .grid-container { /*for smaller screen, grid has 2 columns instead*/
      grid-template-columns: repeat(2, 1fr); /* 2 equal-width columns */
    }
    }
    @media (max-width: 480px) {
    .grid-container { /*more smaller screen so just 1 column*/
      grid-template-columns: 1fr; /* 1 column */
    }
    }